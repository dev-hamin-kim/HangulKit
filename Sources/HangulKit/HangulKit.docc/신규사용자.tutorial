<!-- 나중에 불필요한 외래어 줄이면 어떨지? -->

@Tutorial(time: 10) {
    @Intro(title: "신규 사용자를 위한 안내") {
        HangulKit을 설치하고 기본적인 사용법을 익혀보세요.
    }
    
    @Section(title: "요약") {
        @ContentAndMedia {
            이 안내는 다음 사항을 포함하고 있습니다:
            
            - 프로젝트에 HangulKit을 설치하는 방법
            - HangulKit을 사용할 UITableView와 UITableViewCell을 만드는 방법
            - UITableView에서 HangulKit을 사용하는 방법
            - `hk` wrapper의 메서드와 옵셔널 체이닝을 통해 HangulKit을 사용하는 방법
            
            안내의 마지막 단계에 도달하면, 예시와 같은 리스트가 만들어질 것입니다:
            
            @Image(source: UIKit-preview-6)
        }
        
        @Steps { }
    }
    
    @Section(title: "설치하기") {
        
        @ContentAndMedia {
            UIKit 기반 앱을 생성한 뒤, 처음으로 진행할 것은 `Swift Package Manager`를 이용하여 `HangulKit`을 설치하는 것이에요. 
            
            @Image(source: create-project.png, alt: "")
            
        }
        
        @Steps {
            @Step {
                Xcode의 우측 상단 메뉴에서 `File → Add Package Dependencies…`를 선택해주세요.
                
                @Image(source: xcode-menu-file.png, alt: "")

            }
            
            @Step {
                팝업창의 검색바에서 아래 URL을 입력한 뒤, `Add Package` 버튼을 눌러주세요.
                
                `https://github.com/dev-hamin-kim/HangulKit` 
                
                @Image(source: add-dependency.png, alt: "")
            }
            
            @Step {
                다운로드가 완료된 뒤, `HangulKit` 라이브러리를 생성된 프로젝트에 추가해주세요.
                
                @Image(source: add-to-project.png, alt: "")
            }
            
            @Step {
                Xcode에서 앱 타겟을 선택한 뒤에, `Build Phases` 탭으로 이동하세요.
                그 후, `Link Binary With Libraries` 옆의 하단 화살표(⋁)를 눌러 목록을 펼쳐준 뒤, `HangulKit`이 추가되었는지 확인해주세요.
                추가되지 않았다면, 목록 하단 우측의 더하기(+) 버튼을 눌러 목록에 추가해주세요.
                
                @Image(source: add-library.png, alt: "")
            }
            
            @Step {
                `HangulKit`이 정상적으로 설치가 되었는지 확인하려면, `ViewController.swift` 파일을 선택하세요.

                @Code(name: "ViewController.swift", file: UIKit-ViewController-1.swift)
            }
            
            @Step {
                `ViewController.swift` 파일 내부에서`HangulKit`을 import하세요.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-2.swift)
            }
            
            @Step {
                아래 테스트 코드를 viewDidLoad() 메서드 내부에 작성하여 실행해주세요.
                
                `print(HangulKit.addJosa(after: "한글킷", within: .으로_로) ?? "")`
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-3.swift)
            }
            
            @Step {
                Xcode의 디버그 콘솔에 `"한글킷으로"`가 나온다면, HangulKit을 프로젝트에서 사용할 준비가 완료된 것입니다.
                
                @Image(source: hangulkit-added.png)
            }
        }
        
        
    }
    
    @Section(title: "UITableView 만들기") {
        @ContentAndMedia {
            이 안내에서는 HangulKit을 익히기 위한 `UITableView`을 구성하게 됩니다.
            
            @Image(source: UIKit-preview-1.png, alt: "An iOS app with a list which contains a single cell.")
        }
        
        @Steps {
            @Step {
                `UITableView`에서 사용할 셀, `SampleCell.swift` 파일을 만들어주세요.
                @Code(name: "SampleCell.swift", file: UIKit-SampleCell-1.swift)
            }

            @Step {
                `indexLabel`, `dayLabel`, `choseongLabel`을 추가해주세요. 나중에 `HangulKit`으로 설정할 텍스트 라벨입니다.
                @Code(name: "SampleCell.swift", file: UIKit-SampleCell-2.swift)
            }
            
            @Step {
                필요한 뷰와 레이아웃 관련 코드를 추가해줍니다. (기니까 복사-붙여넣기 하셔도 돼요!)
                @Code(name: "SampleCell.swift", file: UIKit-SampleCell-3.swift)
            }
            
            @Step {
                `ViewController.swift` 파일로 돌아와서,
                @Code(name: "ViewController.swift", file: UIKit-ViewController-3.swift)
            }
            
            @Step {
                `tableView`를 `ViewController`에 추가해줍니다.
                @Code(name: "ViewController.swift", file: UIKit-ViewController-4.swift)
            }
            
            @Step {
                `ViewController`가 `UITableViewDataSource` 프로토콜을 준수하도록 해주세요.
                일단은 1개의 셀만 나타내도록 합니다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-5.swift) {
                    @Image(source:UIKit-preview-1.png, alt: "An iOS app with a list which contains a single cell.")
                }
                
                설정한 후 실행하면, 미리보기에서 볼 수 있는 것과 같은 "0"이 들어간 하나의 셀이 나타나야 해요. 
            }
        }
    }
    
    @Section(title: "UITableView에서 HangulKit 사용해보기") {
        @ContentAndMedia {
            이 안내에서는 `HangulKit`의 메서드를 사용하여 날짜를 나타내는 정수를 순 우리말 날짜로 변환하는 방법을 배우게 됩니다.
          
            @Image(source: UIKit-preview-3.png, alt: "")
        }
        
        @Steps {
            @Step {
                이전 섹션을 잘 따라오셨다면 예시와 같은 코드가 완성되었을 거에요. 
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-5.swift)
            }
            
            @Step {
                `ViewController`에 1부터 10까지의 정수 배열을 선언해주세요. 이 배열을 사용하여 `SampleCell`의 내용을 구성할 것이에요.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-6.swift)
            }

            @Step {
                선언해준 정수 배열의 각 요소를 ``HangulKit/HangulKit/days(_:)`` 메서드를 사용하여 순 우리말 날짜로 바꾸어 봅시다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewControllerExtension-1.swift)
            }
        
            @Step {
                기존 `numberOfRowsInSection`의 코드를 `listOfNumbers.count`로 변경해줍니다.
                또한, 배열 내 현재 숫자를 나타내주는 `currentNumber`를 설정해주고, `setIndex`에 전달해줍니다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewControllerExtension-2.swift) {
                    @Image(source: UIKit-preview-2.png, alt: "An iOS app with a list which contains 10 cells.")
                }
                
                실행 시, 미리보기에서 볼 수 있는 것과 같이 1부터 10까지의 숫자가 `UITableView`의 각 셀에 위치해야 합니다.
            }
            
            @Step {
                현재 숫자를 순 우리말 날짜로 변환한 `currentNumberAsKoreanDay`를 `SampleCell`의 `setDay` 메서드를 통해 셀에 설정해줍니다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewControllerExtension-3.swift) {
                    @Image(source: UIKit-preview-3.png, alt: "An iOS app with a list which contains 10 cells.")
                }
                
                실행 시, 미리보기에서 볼 수 있는 것과 같이 1부터 10까지의 숫자, 숫자에 해당하는 순 우리말 날짜가 `UITableView`의 각 셀에 위치해야 합니다.
            }
        }
    }
    
    @Section(title: "또 다른 방법으로 HangulKit 사용해보기") {
        @ContentAndMedia {
            이 안내에서는 `hk` wrapper의 메서드를 사용하여 더 간단한 방법으로 이전 단계에서 변환된 날짜에 조사를 붙힌 후, 초성을 추출하는 방법을 배우게 됩니다.
            
            @Image(source: create-project.png, alt: "")
        }
        
        @Steps {
            @Step {
                이제 ``HangulKit/HangulKitWrapper/addJosa(within:)`` 메서드를 사용하여 순 우리말 날짜에 조사를 붙여봅시다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewControllerExtension-3.swift)
            }
            
            @Step {
                다음과 같이 `koreanDayWithJosa`를 작성해준 뒤, `setDay` 메서드에 전달해줍니다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewControllerExtension-4.swift) {
                    @Image(source: UIKit-preview-4.png, alt: "An iOS app with a list which contains 10 cells.")
                }
                
                실행 시, 미리보기에서 볼 수 있는 것과 같이 1부터 10까지의 숫자, 숫자에 해당하는 순 우리말 날짜에 조사 "을" 또는 "를" 중 알맞은 것이 추가되어 `UITableView`의 각 셀에 위치해야 합니다.
            }
            
            @Step {
                이번엔 ``HangulKit/HangulKitWrapper/getChoseong()`` 메서드를 사용하여 초성을 추출해봅시다.
                다음과 같이 `choseong`을 작성해준 뒤, `setChoseong` 메서드에 전달해줍니다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewControllerExtension-5.swift) {
                    @Image(source: UIKit-preview-5.png)
                }
                
                실행 시, 미리보기에서 볼 수 있는 것과 같이 이전 단계
            }
            
            @Step {
                마지막으로 옵셔널 체이닝을 통한 예외처리가 잘 되었는지 확인해봅시다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-7.swift)
            }
            
            @Step {
                다음과 같이 `listOfNumbers` 배열을 수정해줍니다.
                
                @Code(name: "ViewController.swift", file: UIKit-ViewController-8.swift) {
                    @Image(source: UIKit-preview-6)
                }
                
                실행 시, 미리보기에서 볼 수 있는 것과 같이 -1과 0은 예외처리가 되어야 하며, 나머지 숫자는 이전 단계에서의 미리보기와 다름이 없어야 합니다.
            }
        }
    }
    
    @Section(title: "다음 이정표") {
        @ContentAndMedia {
            `HangulKit`의 기본적인 사용 방법을 익히게 된 것을 축하합니다!
            
            이후 단계에선, ``HangulKit/HangulKit`` 구조체의 메서드를 둘러보며, 유용하게 사용할 수 있는 메서드를 찾아보는 것을 추천드립니다.
            
            좋은 하루 보내세요!
        }
        
        @Steps { }
    }
}
